echo "   [adding abk_env.env ...]"
USER_ENV=$(dirname $BASH_SOURCE)
# echo "USER_ENV = $USER_ENV"


ABK_ENV_TO_ADD=(
    abk_colors.env
    abk_aliases.env
    abk_aliases_private.env
    abk_7z_lib.env
    abk_prompt.env
    abk_python.env
    abk_oh_my_shell.env
)

for (( i = 0; i < ${#ABK_ENV_TO_ADD[@]}; i++)); do
    ABK_ENV_FULL_NAME="$USER_ENV/${ABK_ENV_TO_ADD[$i]}"
    if [ -f $ABK_ENV_FULL_NAME ]; then
        echo "   [adding $ABK_ENV_FULL_NAME ...]"
        source $ABK_ENV_FULL_NAME
    fi
done


#-------------------------
# abk work related aliases
#-------------------------
ABK_ALIASES_WORK_FILE="$USER_ENV/abk_aliases_work.env"

ABK_HOSTNAME=$(tr '[:upper:]' '[:lower:]' <<< $(hostname))
if [ ! -z "${ABK_HOSTNAME##*aberger*}" ] && [ ! -z "${ABK_HOSTNAME##*abk*}" ]; then
    if [ -f $ABK_ALIASES_WORK_FILE ]; then
        echo "   [adding abk_aliases_work.env ...]"
        source $ABK_ALIASES_WORK_FILE
    fi
fi

#-------------------------
# abk if new sqlite is installed and is not in the $PATH yet, include it
#-------------------------
SQLITE_BIN=/usr/local/opt/sqlite/bin
# if [ -d $SQLITE_BIN ] && [[ ! ":$PATH:" == *":$SQLITE_BIN:"* ]]; then
PATH_STR=":$PATH:"
SQLITE_BIN_STR=":$SQLITE_BIN:"
if [ -d $SQLITE_BIN ] && [ ! -z "${PATH_STR##*$SQLITE_BIN_STR*}" ]; then
    echo "   [adding sqlite ($SQLITE_BIN) to PATH]"
    export PATH="$SQLITE_BIN:$PATH"
    export LDFLAGS="-L/usr/local/opt/sqlite/lib"
    export CPPFLAGS="-I/usr/local/opt/sqlite/include"
else
    echo "   [sqlite ($SQLITE_BIN) is already in the PATH]"
fi

#-------------------------
# if users bin directory exist and is not in the $PATH yet, include it
#-------------------------
USER_BIN="$HOME/$BIN_DIR"
USER_BIN_STR=":$USER_BIN:"
if [ -d $USER_BIN ] && [ ! -z "${PATH_STR##*$USER_BIN_STR*}" ]; then
    echo "   [adding users abk bin ($USER_BIN) to PATH]"
    export PATH="$USER_BIN:$PATH"
else
    echo "   [users abk bin ($USER_BIN) is already in the PATH]"
fi

#-------------------------
# if aws cli is installed
#-------------------------
AWS_CONFIG="$HOME/.aws/config"
if [ -f $AWS_CONFIG ] && [ "$AWS_CONFIG_FILE" = "" ]; then
    echo "   [setting AWS_CONFIG_FILE to $AWS_CONFIG."
    export AWS_CONFIG_FILE=$AWS_CONFIG
fi

#-------------------------
# include ruby environment
#-------------------------
echo "   [adding RBENV_DIR ($RBENV_DIR) to PATH]"
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

#-------------------------
# if fastlane is installed and is not in the $PATH yet, include it
#-------------------------
FASTLANE_BIN="$HOME/.fastlane/bin"
FASTLANE_BIN_STR=":$FASTLANE_BIN:"
if [ -d $FASTLANE_BIN ] && [ ! -z "${PATH##*$FASTLANE_BIN_STR*}" ]; then
    echo "   [adding FASTLANE_BIN ($FASTLANE_BIN) to PATH]"
    export PATH="$FASTLANE_BIN:$PATH"
    export fastlane_DONT_STORE_PASSWORD=1
fi

#-------------------------
# MacOS Catalina changed the default shell from bash to zsh
# this will silense the warning on terminal for now
# might need to convert all shell scripts later to sh or zsh
#-------------------------
export BASH_SILENCE_DEPRECATION_WARNING=1
