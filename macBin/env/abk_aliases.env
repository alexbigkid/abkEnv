# unix cmds
alias ls="ls -G"
alias la="ls -lah"
alias ll="ls -a"
alias dir="ls -lah"
alias h="history"
alias psg="ps -ax | grep"
alias ppp="echo \"${PATH//:/$'\n'}\""
alias ceedling='noglob ceedling'

# aws aliases
alias getAwsAccount="aws sts get-caller-identity --query Account --output text | pbcopy; echo AWS account number is in your clipboard"

# alias rgrep="find . -type f | xargs grep "$1" 2>/dev/null"
alias rgrep="find_text.sh"
alias rfind="find_file.sh"

alias gpt="git push origin"
alias cdg="cd $HOME/dev/git"

if [ "$ABK_UNIX_TYPE" = "mac" ]; then
    # apps aliases
    alias code="/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code"
    alias dm="/Applications/abk_tools/DiffMerge/diffmerge.sh"
    alias od="/usr/bin/opendiff"
    alias bc4="open -a /Applications/Beyond\ Compare.app"
    alias vs="open -n -a Visual\ Studio"

    #brew aliases
    alias brew_update="brew update && brew outdated && brew upgrade && brew cleanup"
    alias brew_cu="brew update && brew cu"

    # number of cpu's aliases
    alias ncpu="sysctl -n hw.ncpu"
    alias npcpu="sysctl -n hw.physicalcpu"
    alias nlcpu="sysctl -n hw.logicalcpu"

    # git aliases
    # MP_PLAYER="afplay -v 1"
    alias snp="git push && afplay -v 1 $HOME_BIN_DIR/env/push_it_x1.m4a && $HOME_BIN_DIR/AhhPushIt.sh"
    alias prg="git push && afplay -v 1 $HOME_BIN_DIR/env/push_it_rg.m4a && $HOME_BIN_DIR/AlexIsAwesome.sh"

else
    alias code="/mnt/c/Program\ Files/Microsoft\ VS\ Code/bin/code"

    # number of cpu's aliases
    alias ncpu="grep -c ^processor /proc/cpuinfo"
    alias npcpu="lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l"
    alias nlcpu="getconf _NPROCESSORS_ONLN"

    # git aliases
    MP_PLAYER=aplay
    alias snp="git push && $HOME_BIN_DIR/AhhPushIt.sh"
    alias prg="git push && $HOME_BIN_DIR/AlexIsAwesome.sh"
fi

#------------------------------------------------------------------------------
# functions
#------------------------------------------------------------------------------
__getFunctionName() {
    local LCL_FUNCNAME=""
    if [ "$IRBT_SHELL" = "bash" ]; then
        LCL_FUNCNAME=${FUNCNAME[1]}
    elif [ "$ABK_SHELL" = "zsh" ]; then
        LCL_FUNCNAME=${funcstack[@]:1:1}
    fi
    echo "$LCL_FUNCNAME"
}

gitDance() {
    local LCL_EXPECTED_NUMBER_OF_PARAMS=0
    local LCL_FUNCNAME=$(__getFunctionName)
    # check correct number of params were passed in
    if [ $# -ne $LCL_EXPECTED_NUMBER_OF_PARAMS ]; then
        echo -e "${LCL_FUNCNAME} - executes in the row: git checkout <ref_branch>; git pull; git checkout <current branch>; git merge <ref_branch>"
        echo -e "  it should be executed in clean git directory"
        echo -e "  if master exists it will set the ref_branch to master"
        echo -e "  if main exists it will set the ref_branch to main"
        echo -e "  otherwise it will exit with error"
        echo -e "  if any of git commands fail, the function will exit with an error"
        echo -e "${GREEN}Usage  :${NC} ${LCL_FUNCNAME}"
        echo -e "  ${RED}ERROR:${NC} ${LCL_FUNCNAME} should be executed with $LCL_EXPECTED_NUMBER_OF_PARAMS parameter(s)."
        return 1
    fi

    local LCL_EXIT_CODE=0
    git status
    local LCL_EXIT_CODE=$?
    if [ $LCL_EXIT_CODE -ne 0 ]; then
        echo -e "  ${RED}ERROR:${NC} probably not in a git directory"
        return $LCL_EXIT_CODE
    fi

    local LCL_REF_BRANCH_NAME=""
    local LCL_MASTER_BRANCH_NAME="master"
    local LCL_MAIN_BRANCH_NAME="main"
    local LCL_CURRENT_BRANCH=$(git branch --show-current)
    local LCL_CHECK_ALL_BRANCHES=$(git branch)
    echo "LCL_CURRENT_BRANCH = $LCL_CURRENT_BRANCH"
    echo "LCL_CHECK_ALL_BRANCHES = $LCL_CHECK_ALL_BRANCHES"

    # check if master is reference branch
    if [ -z "${LCL_CHECK_ALL_BRANCHES##*$LCL_MASTER_BRANCH_NAME*}" ]; then
        echo "master"
        LCL_REF_BRANCH_NAME=${LCL_MASTER_BRANCH_NAME}
    # check if main is reference branch
    elif [ -z "${LCL_CHECK_ALL_BRANCHES##*$LCL_MAIN_BRANCH_NAME*}" ]; then
        echo "main"
        LCL_REF_BRANCH_NAME=${LCL_MAIN_BRANCH_NAME}
    else
        echo -e "  ${RED}ERROR:${NC} Reference branch is not available"
        return 1
    fi

    echo "LCL_REF_BRANCH_NAME TEST = $LCL_REF_BRANCH_NAME"
    if [ "$LCL_CURRENT_BRANCH" = "$LCL_REF_BRANCH_NAME" ]; then
        echo -e "  ${YELLOW}WARNING:${NC} You are already on ${YELLOW}${LCL_CURRENT_BRANCH}${NC} branch! No puedo bailar :)"
        return 0
    fi

    echo -e "  ${YELLOW}[git checkout ${LCL_REF_BRANCH_NAME} ...]${NC}"
    git checkout ${LCL_REF_BRANCH_NAME}
    LCL_EXIT_CODE=$?
    [ $LCL_EXIT_CODE -ne 0 ] && return $LCL_EXIT_CODE

    echo -e "  ${YELLOW}[git pull ...]${NC}"
    git pull
    LCL_EXIT_CODE=$?
    [ $LCL_EXIT_CODE -ne 0 ] && return $LCL_EXIT_CODE

    echo -e "  ${YELLOW}[git checkout ${LCL_CURRENT_BRANCH} ...]${NC}"
    git checkout ${LCL_CURRENT_BRANCH}
    LCL_EXIT_CODE=$?
    [ $LCL_EXIT_CODE -ne 0 ] && return $LCL_EXIT_CODE

    echo -e "  ${YELLOW}[git merge ${LCL_REF_BRANCH_NAME} ...]${NC}"
    git merge ${LCL_REF_BRANCH_NAME}
    LCL_EXIT_CODE=$?
    [ $LCL_EXIT_CODE -ne 0 ] && return $LCL_EXIT_CODE

    return 0
}

# gsCompressHigh () {
#     #do things with parameters like $1 such as
#     [ "$(command -v gs" == "" ] && return "ERROR: gs (GhostScript) is not installed." || which gs
#     [ $# -ne 1 ] && return "ERROR: invalid number of parameters. Excepted is 1. Name of pdf file to reduce size."
#     FILE_TO_COMPRESS=$(basename $1)
#     echo "FILE_TO_COMPRESS: $FILE_TO_COMPRESS"
#     # gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dNOPAUSE -dQUIET -dBATCH -sOutputFile=compressed_PDF_file.pdf $1
#     # gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile=compressed_PDF_file.pdf 20210215_AlexBerger_ImigracionColombia.pdf
#     # gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/prepress -dNOPAUSE -dQUIET -dBATCH -sOutputFile=compressed_PDF_file.pdf 20210215_AlexBerger_ImigracionColombia.pdf
# }
