if [ -f "$ABK_ENV_DIR/abk_colors.env" ]; then
    source $ABK_ENV_DIR/abk_colors.env
fi

function ToolInstalled () {
    local TOOL_EXE=$1
    # echo "[${FUNCNAME[0]}] checks whether tool $TOOL_EXE is installed"

    # is brew installed?
    if [ "$(command -v $TOOL_EXE)" = "" ]; then
        echo -e "[${FUNCNAME[0]}] ${RED}ERROR: ${CYAN}$TOOL_EXE${NC} is not installed, please install ${CYAN}$TOOL_EXE${NC} first"
        return 1
    fi
    return 0
}

function CheckDirectory () {
    if [ $# -ne 1 ]; then
        echo -e "[${FUNCNAME[0]}] ${RED}ERROR:${NC} a directory name to zip up needs to be passed in"        
        return 1
    fi
    
    local DIR=$1
    if [ ! -d $DIR ]; then
        echo -e "[${FUNCNAME[0]}] ${RED}ERROR:${NC} parameter ${GREEN}$DIR${NC} is not a directory"
        echo    "[${FUNCNAME[0]}] please pass in a valid directory to zip up"
        return 1
    fi

    return 0
}

function CheckFile () {
    if [ $# -ne 1 ]; then
        echo -e "[${FUNCNAME[0]}] ${RED}ERROR:${NC} a 7z file name to unzip needs to be passed in"        
        return 1
    fi
    
    local ZIP_FILE=$1
    if [ ! -f $ZIP_FILE ]; then
        echo -e "[${FUNCNAME[0]}] ${RED}ERROR:${NC} parameter ${GREEN}$ZIP_FILE${NC} is not a file"
        echo    "[${FUNCNAME[0]}] please pass in a valid 7z file"
        return 1
    fi

    return 0
}

function CheckDirectoryAndPassword () {
    if [ $# -ne 2 ]; then
        echo -e "[${FUNCNAME[0]}] ${RED}ERROR:${NC} a directory name to zip up and password needs to be passed in"        
        return 1
    fi
    
    CheckDirectory $1 || return $?
    return 0
}

function s7zp () {
    echo "[${FUNCNAME[0]}] packing without preserving owner/group"

    local TOOL_EXE=7za
    ToolInstalled $TOOL_EXE || return $?

    local DIR=$1
    CheckDirectory $DIR || return $?

    echo -e "[${FUNCNAME[0]}] packing and deleting directory ${GREEN}$DIR${NC} into ${GREEN}$DIR.7z${NC}"
    $TOOL_EXE a $DIR.7z $DIR && rm -Rf $DIR || return $?
    return $?
}

function s7ze () {
    echo "[${FUNCNAME[0]}] extract without preserving owner/group"

    local TOOL_EXE=7za
    ToolInstalled $TOOL_EXE || return $?

    local ZIP_FILE=$1
    CheckFile $ZIP_FILE || return $?

    echo -e "[${FUNCNAME[0]}] extracting and deleting file ${GREEN}$ZIP_FILE${NC} into ${GREEN}$(basename $ZIP_FILE .7z)${NC}"
    $TOOL_EXE x $ZIP_FILE && rm $ZIP_FILE || return $?
    return $?
}

function s7zl () {
    echo "[${FUNCNAME[0]}] list files in archive without preserving owner/group"

    local TOOL_EXE=7za
    ToolInstalled $TOOL_EXE || return $?

    local ZIP_FILE=$1
    CheckFile $ZIP_FILE || return $?

    echo -e "[${FUNCNAME[0]}] listing files of the archive ${GREEN}$ZIP_FILE${NC}"
    $TOOL_EXE l $ZIP_FILE || return $?
    return 0
}

function s7zpu () {
    echo "[${FUNCNAME[0]}] packing with preserving owner/group"

    # local TOOL_EXE=7za
    local TOOL_EXE=tar
    ToolInstalled $TOOL_EXE || return $?

    local DIR=$1
    CheckDirectory $DIR || return $?

    # echo -e "[${FUNCNAME[0]}] packing and deleting directory ${GREEN}$DIR${NC} into ${GREEN}$DIR.tar.7z${NC}"
    # tar -cf - $DIR | $TOOL_EXE a -si $DIR.tar.7z && rm -Rf $DIR
    echo -e "[${FUNCNAME[0]}] packing and deleting directory ${GREEN}$DIR${NC} into ${GREEN}$DIR.tar.bz2${NC}"
    $TOOL_EXE -jcpvf $DIR.tar.bz2 $DIR && rm -Rf $DIR || return $?
    return $?
}

function s7zeu () {
    echo "[${FUNCNAME[0]}] extract with preserving owner/group"

    # local TOOL_EXE=7za
    local TOOL_EXE=tar
    ToolInstalled $TOOL_EXE || return $?

    local ZIP_FILE=$1
    CheckFile $ZIP_FILE || return $?

    # echo -e "[${FUNCNAME[0]}] extracting and deleting file ${GREEN}$ZIP_FILE${NC} into ${GREEN}$(basename $ZIP_FILE .tar.7z)${NC}"
    # $TOOL_EXE x -so $ZIP_FILE | tar xf - && rm $ZIP_FILE
    echo -e "[${FUNCNAME[0]}] extracting and deleting file ${GREEN}$ZIP_FILE${NC} into ${GREEN}$(basename $ZIP_FILE .tar.bz2)${NC}"
    $TOOL_EXE -jxpvf $ZIP_FILE && rm $ZIP_FILE || return $?
    return $?
}

function s7zlu () {
    echo "[${FUNCNAME[0]}] list files in archive with preserving owner/group"

    # local TOOL_EXE=7za
    local TOOL_EXE=tar
    ToolInstalled $TOOL_EXE || return $?

    local ZIP_FILE=$1
    CheckFile $ZIP_FILE || return $?

    echo -e "[${FUNCNAME[0]}] listing files of the archive ${GREEN}$ZIP_FILE${NC}"
    # $TOOL_EXE l -so $ZIP_FILE | tar xf -
    $TOOL_EXE -tvf $ZIP_FILE
    return $?
}

function s7zpp () {
    echo "[${FUNCNAME[0]}] packing without preserving owner/group and encrypting with a password"

    local TOOL_EXE=7za
    ToolInstalled $TOOL_EXE || return $?

    local DIR=$1
    CheckDirectory $DIR || return $?

    echo -e "[${FUNCNAME[0]}] packing and deleting directory ${GREEN}$DIR${NC} into ${GREEN}$DIR.7z${NC} and ecrypting"
    # $TOOL_EXE a $DIR.7z $DIR -p && rm -Rf $DIR
    $TOOL_EXE a $DIR.7z $DIR -p || return $?
    return 0
}

function s7zep () {
    echo "[${FUNCNAME[0]}] extract without preserving owner/group and decrypting with a password"

    local TOOL_EXE=7za
    ToolInstalled $TOOL_EXE || return $?

    local ZIP_FILE=$1
    CheckFile $ZIP_FILE || return $?

    echo -e "[${FUNCNAME[0]}] extracting and deleting file ${GREEN}$ZIP_FILE${NC} into ${GREEN}$(basename $ZIP_FILE .7z)${NC}"
    # $TOOL_EXE x $ZIP_FILE -p && rm $ZIP_FILE
    $TOOL_EXE x $ZIP_FILE -p || return $?
    return 0
}

function s7zlp () {
    echo "[${FUNCNAME[0]}] extract without preserving owner/group and decrypting with a password"

    local TOOL_EXE=7za
    ToolInstalled $TOOL_EXE || return $?

    local ZIP_FILE=$1
    CheckFile $ZIP_FILE || return $?

    echo -e "[${FUNCNAME[0]}] listing files in archive ${GREEN}$ZIP_FILE${NC}"
    $TOOL_EXE l $ZIP_FILE -p || return $?
    return 0
}
